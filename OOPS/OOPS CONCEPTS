...........<<< OOPS CONCEPTS >>>................
MAIN GOAL OF OOPS IS TO REDUCE THE COMPLEXITY OF THE PROGRAMS.
OOPS IS A CONCEPT THAT HELPS TO IDENTIFY THE STATE AND BEHAVIOR OF AN OBJECT
1.CLASS 
2.OBJECT 
3.INHERITANCE
4.POLYMORPHISM
5.INTERFACE
6.ABSTRACTION 

1.CLASS  
 > CLASS IS A USER DEFINED DATA TYPE.
 > CLASS IS A BLUEPRINT OF AN OBJECT.
 > IT IS USED TO DEFINE BEHAVIOR AND FUNCTIONALITIES OF AN OBJECT.

2.OBJECT
 > A REALWORLD ENTITY IS CALLED AN OBJECT.
 > AN OBJECT IS AN ENTITY WITH A STATE AND BEHAVIOR.
 > var obj = new ClassName(<CONSTRUCTOR ARGS>)

3.INHERITANCE
  > A CONCEPT THAT ALLOWS US TO CREATE A NEW CLASS BY EXTENDING A CLASS.
  > THE CLASS WHICH EXTENDS ANOTHER CLASS IS CALLED CHILD AND THE CLASS 
    WHICH IS EXTENDED IS CALLED PARENT CLASS.
  > extends KEYWORD IS USED TO EXTEND A CLASS.

4.POLYMORPHISM
  > ALLOWS A METHOD TO HAVE THE SAME NAME TO HAVE DIFFERENT BEHAVIOR.
  > EG:-A FUNCTION WITH SAME NAME CAN BE USED TO PERFORM DIFFERENT FUNCTIONS.
  > METHOD OVERLOADING AND METHOD OVERRIDING ARE EXAMPLES OF POLYMORPHISM.
  > DART HAS 2 TYPES OF POLYMORPHISM RUNTIME AND COMPILE TIME POLYMORPHISM.

5.INTERFACE
  > IT'S A BLUEPRINT OF A CLASS.
  > VARIABLES AND METHODS CAN BE DECLARED IN THE INTERFACE CLASS.
  > THE METHOD DEFINITONS IS NOT INCLUDED IN THE DEFINITION.
  > FOLLOWS ABSTRACT DECLARATION.
  > USED FOR DATA HIDING.

6.ABSTRACTION
  > abstract KEYWORD IS USED TO MAKE A CLASS ABSTRACT.
  > CLASSES DEFINED AS ABSTRACT CANNOT BE INSTANCIATED ( CANNOT BE USED TO CREATE 
    AN OBJECT USING NEW METHOD).     
  > IT CAN CONTAIN ABSTRACT METHODS, NORMAL METHODS & INSTACE VARIABLES.  
  > TO CREATE AN ABSTRACT METHOD WE USE SEMI COLUMN INSTEAD OF METHOD BODY.
  > ABSTRACT METHODS CAN ONLY EXIST WITH ABSTRACT CLASS.
    EG:- void draw(); -- DOES NOT REQUIRE A FUNCTION DEFINITION.
  > IN ORDER TO  USE ABSTRACTION WE NEED TO FOLLOW INHERITANCE.
    EG:- 

    void main(){
        var shape = new Shape() // ERROR . CANNOT INSTANCIATE AN ABSTRACT CLASS
        var rectangle = Rectangle();
        rectangle.draw(); 
    }

    abstract class Shape{ 
        void draw();            // ABSTRACT METHOD
    }

    class Rectangle extends Shape{
        void draw(){
            code....
        }
    }
7.Encapsulation
  > Dart doesnâ€™t contain keywords for restricting access, like public, protected or 
    private used in Java. The encapsulation happens at library level, not at class level.
  > There is a simple rule: any identifier (class, class member, top-level function, or variable)
    that starts with an underscore _ it is private to its library.
    



